service: cocoahomology

package:
  individually: true
  excludeDevDependencies: true

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 130
  region: us-east-1
  endpointType: REGIONAL # Set to regional because the api gateway will be behind a cloudfront distribution
  stage: dev # Default to dev if no stage is specified
  tracing: # Enable X-Ray tracing (debugging)
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: Allow # X-Ray permissions
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
      Resource:
        - "Fn::GetAtt": [DynamoTable, Arn]
    - Effect: Allow # Lambda logs on cloudwatch
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - "Fn::Join":
            - ":"
            - - "arn:aws:logs"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "log-group:/aws/lambda/*:*:*"
    # For warm-up functions
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:*Object*"
      Resource: "*"
  environment:
    DEFILLAMA_SDK_MUTED: true
    tableName: ${self:custom.tableName}
    stage: ${self:custom.stage}

custom:
  stage: ${opt:stage, self:provider.stage}
  esbuild:
    bundle: true
    minify: false
    concurrency: 4
    # for debugging
    #keepOutputDirectory: true
  prune:
    automatic: true
    number: 5 # Number of versions to keep
  tableName: prod-table

functions:
  fallback:
    handler: src/fallback.default
    events:
      - http:
          path: /{params+}
          method: any
  peggedchart:
    handler: src/getPeggedChart.default
    timeout: 60
    memorySize: 3000
    events:
      - http:
          path: peggedcharts
          method: get
      - http:
          path: peggedcharts/{chain}
          method: get
  peggeds:
    handler: src/getPeggeds.default
    timeout: 120
    memorySize: 2000
    events:
      - http:
          path: peggeds
          method: get
  peggedAsset:
    handler: src/getPegged.default
    timeout: 120
    memorySize: 2000
    events:
      - http:
          path: pegged/{pegged}
          method: get
  peggedchains:
    handler: src/getPeggedChains.default
    timeout: 60
    memorySize: 2000
    events:
      - http:
          path: peggedchains
          method: get
  peggedprices:
    handler: src/getPeggedPrices.default
    timeout: 60
    memorySize: 2000
    events:
      - http:
          path: peggedprices
          method: get
  storePeggedAssets:
    handler: src/storePeggedAssets.default
    timeout: 900
    memorySize: 2000
  triggerStorePegged:
    handler: src/triggerStorePegged.default
    timeout: 900
    events:
      - schedule: cron(0 * * * ? *)
  storePeggedPrices:
    handler: src/storePeggedPrices.default
    timeout: 900
    memorySize: 1024
  fetchCoingeckoData:
    handler: src/fetchCoingeckoData.default
    timeout: 900
  triggerFetchCoingeckoData:
    handler: src/triggerFetchCoingeckoData.default

resources:
  Resources:
    # DynamoDB
    DynamoTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain # Make sure the tables can't be deleted by CloudFormation/Serverless
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: N
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        # Set the capacity to auto-scale
        BillingMode: PAY_PER_REQUEST
    # CORS for api gateway errors
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    # required to enable request path parameter caching in API Gateway
    ApiGatewayMethodPeggedchartsChainVarGet:
      Properties:
        RequestParameters:
          method.request.path.chain : false
        Integration:
          RequestParameters:
            integration.request.path.chain: method.request.path.chain
          CacheNamespace: ApiGatewayMethodChainVarGetCacheNS
          CacheKeyParameters:
            - method.request.path.chain

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-prune-plugin
